mongod --port 27000
# After configuring mongod, we can connect to mongo by specifying a port:
mongo --port 27000

mongod -f mongod.conf
mongod --config mongod.conf


storage:
  dbPath: "/data/db"
net:
  bindIp: localhost
  port: "27000"
security:
  authorization: enabled

storage:
  dbPath: "/var/mongodb/db"
net:
  bindIp: localhost
  port: 27000
security:
  authorization: enabled
systemLog:
  destination: file
  path: /var/mongodb/logs/mongod.log
  logAppend: true
processManagement:
  fork: true


# You will need to create this user in order to validate your work.
mongo admin --host localhost:27000 --eval '
  db.createUser({
    user: "m103-admin",
    pwd: "m103-pass",
    roles: [
      {role: "root", db: "admin"}
    ]
  })
'


mongo admin --host localhost:27000 -u m103-admin -p m103-pass
db.createUser({user: "m103-application-user",pwd: "m103-application-pass",roles: [{role: "readWrite", db: "applicationData"}]})

db.createUser({
> user: "m103-application-user",
> pwd: "m103-application-pass",
> roles: [
> {role: "readWrite", db: "applicationData"}
> ]
})

mongo admin --host localhost:27000 -u m103-admin -p m103-pass --eval '
>   db.createUser({
>     user: "m103-application-user",
>     pwd: "m103-application-pass",
>     roles: [
>       {role: "readWrite", db: "applicationData"}
>     ]
>   })
> '


ls -l /data/db
ls -l /data/db/diagnostic.data
ls -l /data/db/journal
ls /tmp/mongodb-27017.sock

# Import
mongoimport --port 27000 /datset/products.json
mongoimport --host localhost:27000 -u m103-application-user -p m103-application-pass -d applicationData /dataset/products.json
mongoimport --host localhost:27000 --authenticationDatabase=admin -u m103-application-user -p m103-application-pass -d applicationData -c products /dataset/products.json


# Replica Set

storage:
  dbPath: /var/mongodb/db/1
net:
  bindIp: localhost
  port: 27001
security:
  authorization: enabled
  keyFile: /var/mongodb/pki/m103-keyfile
systemLog:
  destination: file
  path: /var/mongodb/logs/mongod1.log
  logAppend: true
processManagement:
  fork: true
replication:
  replSetName: m103-repl

mongod -f mongod_1.conf
mongo --port 27001
rs.initiate()

mongo --port 27001 -eval 'rs.initiate()'

use admin

mongo admin --port 27001 -eval 'db.createUser({
  user: "m103-admin",
  pwd: "m103-pass",
  roles: [
    {role: "root", db: "admin"}
  ]
})'

exit
mongo --host "m103-repl/localhost:27001" -u "m103-admin" -p "m103-pass" --authenticationDatabase "admin"
rs.status()
rs.add("localhost:27002")
rs.isMaster()
rs.stepDown()

# Connect to the mongod process where you ran rs.initiate() and add the other two nodes:
mongo admin --host m103-repl/localhost:27001 \
            --username m103-admin --password m103-pass \
            --eval 'rs.add("localhost:27002")
                    rs.add("localhost:27003")'

# Now, running rs.status() should give us a members list with three healthy nodes:
mongo admin --host m103-repl/localhost:27001 \
            --username m103-admin --password m103-pass \
            --eval 'rs.status()'



# Replication Commands
rs.status()
rs.isMaster()
db.serverStatus()['repl']
rs.printReplicationInfo()



# Reconfigure a Replica Set
mongo --host "m103-repl/localhost:27004" -u "m103-admin" -p "m103-pass" --authenticationDatabase=admin
rs.conf()
cfg = rs.conf()
cfg.members[3].votes = 0
cfg.members[3].hidden = true
cfg.members[3].priority = 0
rs.reconfig(cfg)
rs.conf()



# Deploy a Sharded Cluster
mongos -f mongos.conf
mongo --port 26000 -u "m103-admin" -p "m103-pass" --authenticationDatabase=admin
sh.status()
sh.addShard("m103-repl/shard1/localhost:27001")



# Shard a Collection
mongoimport --host localhost:26000 -u "m103-admin" -p "m103-pass" --authenticationDatabase "admin" -d m103 -c products /dataset/products.json
mongo --port 26000 -u "m103-admin" -p "m103-pass" --authenticationDatabase=admin
sh.status()
use m103
show collections
sh.enableSharding("m103")
db.products.createIndex( { "sku" : 1 } )
sh.shardCollection("m103.products", {"sku" : 1 } )













